# Generated by Django 5.1.6 on 2025-04-02 12:52

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "name",
                    models.CharField(
                        max_length=255,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Este campo debe comenzar con una letra.",
                                regex="^[A-Za-zÁÉÍÓÚáéíóúÑñ].*",
                            )
                        ],
                    ),
                ),
                (
                    "surname",
                    models.CharField(
                        max_length=255,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Este campo debe comenzar con una letra.",
                                regex="^[A-Za-zÁÉÍÓÚáéíóúÑñ].*",
                            )
                        ],
                    ),
                ),
                ("username", models.CharField(max_length=255, unique=True)),
                (
                    "saldo",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "password",
                    models.CharField(
                        help_text="La contraseña debe tener al menos 8 caracteres,una mayúscula, un número y un carácter especial.",
                        max_length=255,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="La contraseña debe contener al menos una letra mayúscula.",
                                regex="^(?=.*[A-Z])",
                            ),
                            django.core.validators.RegexValidator(
                                message="La contraseña debe contener al menos un número.",
                                regex="^(?=.*\\d)",
                            ),
                            django.core.validators.RegexValidator(
                                message="La contraseña debe contener al menos un carácter especial.",
                                regex='^(?=.*[!@#$%^&*()_+\\-=\\[\\]{};:"\\\\|,.<>\\/?])',
                            ),
                            django.core.validators.RegexValidator(
                                message="La contraseña debe tener al menos 8 caracteres.",
                                regex="^.{8,}$",
                            ),
                        ],
                    ),
                ),
                (
                    "email",
                    models.CharField(
                        max_length=255,
                        unique=True,
                        validators=[
                            django.core.validators.EmailValidator(
                                message="Introduce un email válido."
                            )
                        ],
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=25,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Introduce un númerode teléfono válido.",
                                regex="^\\+?[0-9]{7,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Este campo debe comenzar con una letra.",
                                regex="^[A-Za-zÁÉÍÓÚáéíóúÑñ].*",
                            )
                        ],
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Este campo debe comenzar con una letra.",
                                regex="^[A-Za-zÁÉÍÓÚáéíóúÑñ].*",
                            )
                        ],
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True,
                        max_length=75,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Este campo debe comenzar con una letra.",
                                regex="^[A-Za-zÁÉÍÓÚáéíóúÑñ].*",
                            )
                        ],
                    ),
                ),
                (
                    "postal_code",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="El codigo postal debe tener el                     formato 12345 o 12345-6789.",
                                regex="^[0-9]{5}(-[0-9]{4})?$",
                            )
                        ],
                    ),
                ),
                (
                    "cif",
                    models.CharField(
                        max_length=20,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="CIF erroneo. Debe ser una letra, 7 numeros y un dígito/letra.",
                                regex="^[A-HJ-NP-SUVW]\\d{7}[0-9A-J]$",
                            )
                        ],
                    ),
                ),
                (
                    "dni",
                    models.CharField(
                        blank=True,
                        max_length=9,
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="El DNI debe tener el formato: 12345678A",
                                regex="^\\d{8}[A-Z]$",
                            )
                        ],
                    ),
                ),
                ("is_verified", models.BooleanField(default=False)),
                (
                    "pricing_plan",
                    models.CharField(
                        choices=[("free", "Gratis"), ("premium", "Premium")],
                        default="free",
                        max_length=10,
                    ),
                ),
                ("owner_rating", models.FloatField(default=0.0)),
                ("renter_rating", models.FloatField(default=0.0)),
                (
                    "reset_token",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("reset_token_expiration", models.DateTimeField(blank=True, null=True)),
                ("is_admin", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rating", models.FloatField(default=0.0)),
                ("comment", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "reviewed_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews_received",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reviewer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews_given",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("reviewer", "reviewed_user")},
            },
        ),
    ]
